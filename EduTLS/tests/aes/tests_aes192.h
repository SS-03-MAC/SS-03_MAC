#include "../../src/crypto/symmetric/aes.h"
#include <cassert>
#include <cstddef>
#include <cstdint>
#include <cstdio>

int test_aes192_key_expansion() {
  aes *a;
  uint8_t key[24] = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b,
                     0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b};
  uint32_t expected[52] = {
      0x8e73b0f7, 0xda0e6452, 0xc810f32b, 0x809079e5, 0x62f8ead2, 0x522c6b7b, 0xfe0c91f7, 0x2402f5a5, 0xec12068e,
      0x6c827f6b, 0xe7a95b9,  0x5c56fec2, 0x4db7b4bd, 0x69b54118, 0x85a74796, 0xe92538fd, 0xe75fad44, 0xbb095386,
      0x485af057, 0x21efb14f, 0xa448f6d9, 0x4d6dce24, 0xaa326360, 0x113b30e6, 0xa25e7ed5, 0x83b1cf9a, 0x27f93943,
      0x6a94f767, 0xc0a69407, 0xd19da4e1, 0xec1786eb, 0x6fa64971, 0x485f7032, 0x22cb8755, 0xe26d1352, 0x33f0b7b3,
      0x40beeb28, 0x2f18a259, 0x6747d26b, 0x458c553e, 0xa7e1466c, 0x9411f1df, 0x821f750a, 0xad07d753, 0xca400538,
      0x8fcc5006, 0x282d166a, 0xbc3ce7b5, 0xe98ba06f, 0x448c773c, 0x8ecc7204, 0x1002202};

  a = aes::aes_192(key);
  uint32_t *actual = a->__testing_copy_key();

  for (size_t i = 0; i < 52; i++) {
    assert(actual[i] == expected[i]);
  }

  delete[] actual;
  delete a;

  return 0;
}

int test_aes192_encrypt() {
  aes *a;
  uint8_t plaintext[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                           0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
  uint8_t ciphertext[16] = {0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0,
                            0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91};
  uint8_t output[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  uint8_t key[24] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                     0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17};

  a = aes::aes_192(key);

  a->encrypt(output, plaintext, 16);

  for (size_t i = 0; i < 16; i++) {
    assert(output[i] == ciphertext[i]);
  }

  delete a;

  return 0;
}

int test_aes192_decrypt() {
  aes *a;
  uint8_t plaintext[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                           0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
  uint8_t ciphertext[16] = {0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0,
                            0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91};
  uint8_t output[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  uint8_t key[24] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                     0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17};

  a = aes::aes_192(key);

  a->decrypt(output, ciphertext, 16);

  for (size_t i = 0; i < 16; i++) {
    assert(output[i] == plaintext[i]);
  }

  delete a;

  return 0;
}

int test_aes192_avs_gfsbox() {
  aes *a;

  uint8_t plaintext[6][16] = {
      {0x1b, 0x07, 0x7a, 0x6a, 0xf4, 0xb7, 0xf9, 0x82, 0x29, 0xde, 0x78, 0x6d, 0x75, 0x16, 0xb6, 0x39},
      {0x9c, 0x2d, 0x88, 0x42, 0xe5, 0xf4, 0x8f, 0x57, 0x64, 0x82, 0x05, 0xd3, 0x9a, 0x23, 0x9a, 0xf1},
      {0xbf, 0xf5, 0x25, 0x10, 0x09, 0x5f, 0x51, 0x8e, 0xcc, 0xa6, 0x0a, 0xf4, 0x20, 0x54, 0x44, 0xbb},
      {0x51, 0x71, 0x97, 0x83, 0xd3, 0x18, 0x5a, 0x53, 0x5b, 0xd7, 0x5a, 0xdc, 0x65, 0x07, 0x1c, 0xe1},
      {0x26, 0xaa, 0x49, 0xdc, 0xfe, 0x76, 0x29, 0xa8, 0x90, 0x1a, 0x69, 0xa9, 0x91, 0x4e, 0x6d, 0xfd},
      {0x94, 0x1a, 0x47, 0x73, 0x05, 0x82, 0x24, 0xe1, 0xef, 0x66, 0xd1, 0x0e, 0x0a, 0x6e, 0xe7, 0x82}};

  uint8_t ciphertext[7][16] = {
      {0x27, 0x5c, 0xfc, 0x04, 0x13, 0xd8, 0xcc, 0xb7, 0x05, 0x13, 0xc3, 0x85, 0x9b, 0x1d, 0x0f, 0x72},
      {0xc9, 0xb8, 0x13, 0x5f, 0xf1, 0xb5, 0xad, 0xc4, 0x13, 0xdf, 0xd0, 0x53, 0xb2, 0x1b, 0xd9, 0x6d},
      {0x4a, 0x36, 0x50, 0xc3, 0x37, 0x1c, 0xe2, 0xeb, 0x35, 0xe3, 0x89, 0xa1, 0x71, 0x42, 0x74, 0x40},
      {0x4f, 0x35, 0x45, 0x92, 0xff, 0x7c, 0x88, 0x47, 0xd2, 0xd0, 0x87, 0x0c, 0xa9, 0x48, 0x1b, 0x7c},
      {0xd5, 0xe0, 0x8b, 0xf9, 0xa1, 0x82, 0xe8, 0x57, 0xcf, 0x40, 0xb3, 0xa3, 0x6e, 0xe2, 0x48, 0xcc},
      {0x06, 0x7c, 0xd9, 0xd3, 0x74, 0x92, 0x07, 0x79, 0x18, 0x41, 0x56, 0x25, 0x07, 0xfa, 0x96, 0x26}};

  uint8_t output[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  uint8_t key[24] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  a = aes::aes_192(key);

  for (size_t j = 0; j < 6; j++) {
    a->encrypt(output, plaintext[j], 16);

    for (size_t i = 0; i < 16; i++) {
      assert(output[i] == ciphertext[j][i]);
    }
  }

  delete a;

  return 0;
}
